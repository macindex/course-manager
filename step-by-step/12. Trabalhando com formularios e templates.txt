Passando atributo de rota e editar o mesmo:


"course-info.component.html"

apagar tudo

inserir

<h2>Course info</h2>

<hr/> //Deixa linha separando o formulário do titulo

<form>

</form>


Agora será editado

course-info.component.ts


criar método dentro de


course.service.ts

após

retrieveAll():

inserir

retrieveById(id: number):Course{
	return COURSES.find((courseItereator: Course) => courseItereator.id === id);
}



Agora


dentro de: 
course-info.component.ts

após: export class

alterar "courseId" para

course: Course;

depois

em this.courseId 

será

this.course

deve ser importado lá emcima

import { Course } from './course';


dentro do constructor após ActivatedRouter, private courseService: CourseService


depois em:

this.course = this.courseService.retrieveById(+this.activatedRoute)


voltando ao:

course-info.component.html







<form #coureseForm="ngForm">


copiado a div de course-list.component.html e colocado abaixo do form


<div class="form-group row">
	<label class="col-sm-2 col-form-label">Name:</label>
    
    <div class="col-sm-10">
        <input [(ngModel)]="course.name" required name="name" #courseName="ngModel" [ngclass]="{'is-invalid': courseName.invalid}" class="form-control">
	{{ courseName.value }} //variável de template 
	{{ courseName.valid }} 
	<div class="invalid-feedback">
	<span>Course name is required</span>

	</div>

    </div>
</div>

//Mensagens de validação

testar...
Replicado agora entra o price

<div class="form-group row">
	<label class="col-sm-2 col-form-label">Price:</label>

<div class="col-sm-10">
        <input [(ngModel)]="course.price" required name="name" #coursePrice="ngModel" [ngclass]="{'is-invalid': coursePrice.invalid}" class="form-control">
	{{ courseName.value }} //variável de template 
	{{ courseName.valid }} 
	<div class="invalid-feedback">
	<span>Course name is required</span>

	</div>

    </div>
</div>





variável de template




<div class="col-sm-10">
        <input [(ngModel)]="course.rating" required name="rating" #courseRating="ngModel" [ngClass]="{'is-invalid': courseRating.invalid}" class="form-control">
	<div class="invalid-feedback">
    	<span>Course rating is required</span>
   	</div>
    </div>
</div>


<div class="col-sm-10">
        <input [(ngModel)]="course.description" required name="description" #courseDescription="ngModel" [ngClass]="{'is-invalid': courseDescription.invalid}" class="form-control">
	<div class="invalid-feedback">
    	<span>Course description is required</span>
   	</div>
    </div>
</div>


Adicionado dois botões de salvar e voltar

<button class"btn btn-primary mr-2">Save</button>
<button class"btn btn-secondary mr-2">Back</button>


Agora será verificado se o form como um todo esta válido


<button [disabled]="courseForm.invalid"class"btn btn-primary mr-2">Save</button>
<button class"btn btn-secondary mr-2">Back</button>

chamar ação (click)(save)


dentro de course-info.component.ts


}
save(): void{
{


em course.service.ts


depois de retrieveAll()

}
save(course: Course): void{
	if(course.id){
	const index = COURSE.findIndex((courseIterator: Course) => courseIterator.id === course.id);
	COURSE[index] = course;
}
}


course-info.component.ts

save(): void{
	this.courseService.save(this.course);
}


Criar rota para voltar a lista de cursos


<button [routerLink]="['/courses']"
 class"btn btn-secondary mr-2">Back</button>
